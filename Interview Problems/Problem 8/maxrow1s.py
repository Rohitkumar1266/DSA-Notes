# -*- coding: utf-8 -*-
"""MaxRow1s.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PD39FApmneayxhUrK63wCT-gpy5K1JKQ

Problem Statement : Given a boolean 2D array of n x m dimensions where each row is sorted. Find the 0-based index of the first row that has the maximum number of 1's.
"""

# Approach 1

def rowWithMax1s(arr):
  res = -1
  # number of rows
  n = len(arr)
  # number of columns
  m = len(arr[0])
  for i in range(0,m):
    for j in range(0,n):
      if(arr[j][i] == 1):
        return j
  return res

# Approach 2
# Time Complexity : O(m+n)
# Space Complexity : O(1)
'''
def rowWithMax1s(arr):
  res = -1
  n = len(arr)
  m = len(arr[0])
  # Traversal from right to left
  j = m - 1
  while(j>=0 and arr[0][j] == 1):
    j = j - 1
  # row is containing that row which is having maximuma one's
  row = 0
  for i in range(1,n):
    while(j>=0 and arr[i][j] == 1):
      j = j - 1
      row = i
  
  if(j == m-1):
    return -1
  return row
'''

# Driver Code
matrix = [[0, 0, 0, 1],
       [0, 1, 1, 1],
       [0, 0, 0, 0],
        [1, 1, 1, 1]]

print(rowWithMax1s(matrix))

